" Pathogen for managing plugins
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

" Pretty defaults for syntax highlighting and indentation
syntax on
filetype plugin indent on

" Ctrl-p for fuzzy file/buffer finding
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = '.pyc$'
let g:ctrlp_dotfiles = 0
nmap <C-b> :CtrlPBuffer<CR>
let g:ctrlp_open_new_file = 'r'

" NERDtree filesystem explorer
nmap \e :NERDTreeToggle<CR>

" Tagbar
nmap <F8> :TagbarToggle<CR>

" Move up and down on a linewise basis instead of around wrapped lines
nmap j gj
nmap k gk

" Nice defaults for searching
set incsearch
set ignorecase
set smartcase
set hlsearch
nmap \q :nohlsearch<CR>

" Setup the colorscheme 
set t_Co=256
colorscheme Monokai " Dark
" colorscheme summerfruit256 " Light
hi Normal ctermbg=none
hi NonText ctermbg=none

" Tab/spaces defaults
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Line numbers
set number

" Crosshair
set cursorline
set cursorcolumn
highlight CursorLine ctermbg=236
highlight CursorColumn ctermbg=236

" Marker at 80 chars
if exists("&colorcolumn")
    set colorcolumn=80
    highlight ColorColumn ctermbg=236
endif

" Ctrl-E for switching to last buffer
nmap <C-e> :e#<CR>

" Turn off syntax highlighting & add Word wrapping for Markdown files
autocmd BufNewFile,BufRead *.md set filetype=text
autocmd BufNewFile,BufRead *.md set linebreak
au BufRead,BufNewFile *.md set filetype=markdown

" Switch bindings for 0 and ^ - as 0 is easier to hit than ^
noremap 0 ^
noremap ^ 0

" Relative line numbers
set rnu

" Bind shortcut keys for quickfix list navigation
nnoremap ]q :cnext<CR>
nnoremap [q :cprev<CR>
nnoremap ]Q :clast<CR>
nnoremap [Q :cfirst<CR>

" Set scrolloff to always show 10 lines of content around cursor
set scrolloff=10

" Statusline configuration
set laststatus=2                                    " Always visible
set statusline+=%{PrettyFugitiveHead()}             " Git branch
set statusline+=%<                                  " Truncate here
set statusline+=%F\                                 " Filename
set statusline+=%M\                                 " Modified flag
set statusline+=%=\                                 " Left/right separator
set statusline+=%{SyntasticStatuslineFlag()}        " Syntax errors
set statusline+=%v:%l                               " Cursor x:y

" Statusline syntax error format
let g:syntastic_stl_format = '%E{ERR(%e:%fe)}%B{ }%W{WARN(%w:%fw)} '

" Statusline git branch display
function! PrettyFugitiveHead()
    let head = fugitive#head()
    if len(head) > 0
        return head.' '
    endif
    return ''
endfunction

" Function for reading a file from another git branch into a new buffer
function! Gitread(Branch, Path)
    execute(":enew | :0r !git show " . a:Branch . ":" . a:Path)
    execute(":f " . a:Path)
    execute(":set filetype=" . a:Path)
endfunction
:command -nargs=+ Gitread :call Gitread(<f-args>)

" Explicitely require Bash shell for Vim.
" Avoids plugin errors when system is using Fish shell.
set shell=/bin/bash
